{"version":3,"file":"initeditbuttons.min.js","sources":["../src/initeditbuttons.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/*\n * @package    mod_booking\n * @copyright  Wunderbyte GmbH <info@wunderbyte.at>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport ModalForm from 'core_form/modalform';\nimport Notification from 'core/notification';\nimport Pending from 'core/pending';\nimport {\n    get_string as getString,\n    get_strings as getStrings,\n} from 'core/str';\nimport { deletEntity, toggleVisibility } from './editcontrolws';\n\n\n/**\n * Init\n * @param {*} containerSelector\n *\n */\nexport const init = (containerSelector) => {\n    const rootNode = document.querySelector(containerSelector);\n\n    rootNode.addEventListener('click', e => {\n        const actonHandler = e.target.closest('[data-action]');\n        if (!actonHandler) {\n            return;\n        }\n        if (actonHandler.dataset.action === 'local_entities_delete-entity') {\n            e.preventDefault();\n            confirmDelete(actonHandler.dataset.id);\n            return;\n        }\n        if (actonHandler.dataset.role === 'local_entities_togglevisibility-entity') {\n            e.preventDefault();\n            return;\n        }\n        if (actonHandler.dataset.action === 'local_entities_deletecfcategory') {\n            e.preventDefault();\n            confirmDelete(actonHandler.dataset.id);\n            return;\n        }\n    });\n}\n\n\n/**\n * Display confirmation dialogue\n *\n * @param {Number} id\n * @param {String} type\n * @param {String} component\n * @param {String} area\n * @param {Number} itemid\n */\n const confirmDelete = (id, type, component, area, itemid) => {\n    const pendingPromise = new Pending('core_customfield/form:confirmDelete');\n\n    getStrings([\n        {'key': 'confirm'},\n        {'key': 'confirmdelete' + type, component: 'core_customfield'},\n        {'key': 'yes'},\n        {'key': 'no'},\n    ])\n    .then(strings => {\n        return Notification.confirm(strings[0], strings[1], strings[2], strings[3], function() {\n            const pendingDeletePromise = new Pending('core_customfield/form:confirmDelete');\n\n        });\n    })\n    .then(pendingPromise.resolve)\n    .catch(Notification.exception);\n};\n\n"],"names":["containerSelector","document","querySelector","addEventListener","e","actonHandler","target","closest","dataset","action","preventDefault","confirmDelete","id","role","type","component","area","itemid","pendingPromise","Pending","then","strings","Notification","confirm","resolve","catch","exception"],"mappings":";;;;;4OAoCqBA,oBACAC,SAASC,cAAcF,mBAE/BG,iBAAiB,SAASC,UACzBC,aAAeD,EAAEE,OAAOC,QAAQ,oBACjCF,iBAG+B,iCAAhCA,aAAaG,QAAQC,cACrBL,EAAEM,sBACFC,cAAcN,aAAaG,QAAQI,OAGL,2CAA9BP,aAAaG,QAAQK,WAIW,oCAAhCR,aAAaG,QAAQC,QACrBL,EAAEM,sBACFC,cAAcN,aAAaG,QAAQI,YALnCR,EAAEM,4BAqBPC,cAAgB,CAACC,GAAIE,KAAMC,UAAWC,KAAMC,gBACzCC,eAAiB,IAAIC,iBAAQ,4DAExB,CACP,KAAQ,WACR,KAAQ,gBAAkBL,KAAMC,UAAW,oBAC3C,KAAQ,OACR,KAAQ,QAEXK,MAAKC,SACKC,sBAAaC,QAAQF,QAAQ,GAAIA,QAAQ,GAAIA,QAAQ,GAAIA,QAAQ,IAAI,WAC3C,IAAIF,iBAAQ,4CAIhDC,KAAKF,eAAeM,SACpBC,MAAMH,sBAAaI"}